language: cpp
sudo: required
dist: trusty
  
git:
  depth: 3
   
matrix:
  include:
    - os: osx
      osx_image: xcode9.4
      compiler: clang
      env: MATRIX_EVAL="CONFIG=Release && RUN_PCM_TESTS=ON"
      
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-5
          - cmake
          - libogg-dev
          - libvorbis-dev
          - libflac++-dev

      env: MATRIX_EVAL="CONFIG=Release && CXX=g++-5 && RUN_PCM_TESTS=ON"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-5
          - cmake
          - libogg-dev
          - libvorbis-dev
          - libflac++-dev
          - lcov

      env: MATRIX_EVAL="CONFIG=Coverage && CXX=g++-5 && GCOV=gcov-5 && RUN_PCM_TESTS=OFF"

before_install:
  - eval "${MATRIX_EVAL}"
  - mkdir deps && cd deps
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      brew install git-lfs libogg libvorbis flac;
      git lfs install;
    else
      wget http://sourceforge.net/projects/boost/files/boost/1.64.0/boost_1_64_0.tar.bz2;
      tar -xvjf boost_1_64_0.tar.bz2 | tail -n 50;
      cd boost_1_64_0;
      sudo ./bootstrap.sh --with-libraries="filesystem,system,iostreams,program_options,regex";
      sudo ./b2 install | tail -n 50;
      cd ..;
    fi
  - mkdir gtest && cd gtest;
  - wget https://github.com/google/googletest/archive/release-1.8.0.tar.gz;
  - tar -xzvf release-1.8.0.tar.gz;
  - cd googletest-release-1.8.0;
  - mkdir build && cd build;
  - cmake .. -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release;
  - cmake --build .;
  - sudo cp -r ../googletest/include/gtest /usr/local/include;
  - sudo cp googlemock/gtest/lib*.a /usr/local/lib;
  - cd $TRAVIS_BUILD_DIR;

before_script:
  - mkdir build
  - cd build
  - cmake .. -DCMAKE_BUILD_TYPE=$CONFIG -DNIMEDIA_TREAT_WARNINGS_AS_ERRORS=ON -DNIMEDIA_PCM_TESTS=$RUN_PCM_TESTS

script:
  - export CTEST_OUTPUT_ON_FAILURE=TRUE
  - cmake --build . && git lfs pull -X "" && cmake --build . --target test

after_success:
  - if [ "$CONFIG" == "Coverage" ]; then
      lcov --gcov-tool $(which ${GCOV}) -d . -c -o coverage.info;
      bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports";
    fi
