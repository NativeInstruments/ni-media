strategy:
  matrix:
    windows-msvc-2019:
      IMAGE_NAME: windows-2019
      BUILD_CONFIG: Release
      RUN_PCM_TESTS: ON
      CMAKE_ENV:
      INIT_CMD:

    windows-msvc-2017:
      IMAGE_NAME: vs2017-win2016
      BUILD_CONFIG: Release
      RUN_PCM_TESTS: ON
      CMAKE_ENV:
      INIT_CMD:

    macOS-xcode-12.2:
      IMAGE_NAME: macOS-10.15
      BUILD_CONFIG: Release
      RUN_PCM_TESTS: ON
      CMAKE_ENV:
      INIT_CMD: xcversion select 12.2

    macOS-xcode-11.7:
      IMAGE_NAME: macOS-10.15
      BUILD_CONFIG: Release
      RUN_PCM_TESTS: ON
      CMAKE_ENV:
      INIT_CMD: xcversion select 11.7

    ubuntu-gcc-7:
      IMAGE_NAME: ubuntu-18.04
      BUILD_CONFIG: Release
      RUN_PCM_TESTS: ON
      CMAKE_ENV: CC=gcc-7 CXX=g++-7
      INIT_CMD:

    ubuntu-gcc-8:
      IMAGE_NAME: ubuntu-18.04
      BUILD_CONFIG: Release
      RUN_PCM_TESTS: ON
      CMAKE_ENV: CC=gcc-8 CXX=g++-8
      INIT_CMD:

    ubuntu-gcc-9:
      IMAGE_NAME: ubuntu-18.04
      BUILD_CONFIG: Release
      RUN_PCM_TESTS: ON
      CMAKE_ENV: CC=gcc-9 CXX=g++-9
      INIT_CMD:

    ubuntu-gcc-9-gcov:
      IMAGE_NAME: ubuntu-18.04
      BUILD_CONFIG: Coverage
      RUN_PCM_TESTS: OFF
      CMAKE_ENV: CC=gcc-9 CXX=g++-9 GCOV=gcov-9
      INIT_CMD: 

pool:
  vmImage: $(IMAGE_NAME)

steps:
- task: CmdLine@2
  displayName: 'Init'
  inputs:
    script: $(INIT_CMD)

- task: CMake@1
  displayName: 'CMake configure'
  inputs:
    cmakeArgs: '-E env $(CMAKE_ENV) cmake -B build -S . -DCMAKE_BUILD_TYPE=$(BUILD_CONFIG) -DNIMEDIA_TREAT_WARNINGS_AS_ERRORS=ON -DCMAKE_TOOLCHAIN_FILE=$(VCPKG_INSTALLATION_ROOT)/scripts/buildsystems/vcpkg.cmake -DNIMEDIA_PCM_TESTS=$(RUN_PCM_TESTS)'
    workingDirectory: '$(Build.SourcesDirectory)'

- task: CMake@1
  displayName: 'CMake build'
  inputs:
    cmakeArgs: '--build . --config $(BUILD_CONFIG)'
    workingDirectory: 'build'

- task: CmdLine@2
  displayName: 'Run tests'
  inputs:
    script: 'git lfs pull -X \"\" && ctest --verbose -C $(BUILD_CONFIG) --timeout 900'
    workingDirectory: 'build'

- task: PublishTestResults@2
  displayName: 'Publish test reports'
  condition: ne( variables['BUILD_CONFIG'], 'Coverage' )
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/test-reports/*.xml'

- task: CmdLine@2
  displayName: 'Publish coverage reports'
  condition: eq( variables['BUILD_CONFIG'], 'Coverage' )
  inputs:
    script: |
      sudo apt-get update
      sudo apt-get install -y lcov
      lcov --version
      lcov --gcov-tool $(which ${GCOV}) -d . -c -o coverage.info;
      bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports";
    workingDirectory: 'build'
